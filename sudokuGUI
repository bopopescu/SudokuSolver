import pygame
import time
import requests
import random
import copy
from bs4 import BeautifulSoup
from solver import solve, check_if_valid, locate_empty_space

pygame.font.init()

screen = pygame.display.set_mode((600, 540))

f = pygame.font.SysFont("comicsans", 36)


class Grid:

    def __init__(self, rows, cols, width, height, scn, puzzle):
        self.rows = rows
        self.cols = cols
        self.width = width
        self.height = height
        self.scn = scn
        self.puzzle = puzzle
        self.model = None
        self.selected = None
        self.squares = [[Square(self.puzzle[i][j], i, j, width, height, ) for j in range(cols)] for i in range(rows)]
        self.update_model()
        self.initial_puzzle = copy.deepcopy(puzzle)
        self.solved = None

    def update_model(self):
        self.model = [[self.squares[i][j].value for j in range(self.cols)] for i in range(self.rows)]

    def place_number(self, number):
        row, col = self.selected
        if self.squares[row][col].value == 0:
            self.squares[row][col].set(number)
            self.update_model()
            if check_if_valid(self.model, self.selected, number) and number == self.solved[row][col]:
                return True
            else:
                # backtrack and change value back to 0
                self.squares[row][col].set(0)
                self.squares[row][col].set_temp(0)
                self.update_model()
                return False

    def draw(self):
        partitions = self.width / 9
        # draw puzzle content
        for i in range(self.rows):
            for j in range(self.cols):
                if self.initial_puzzle[i][j] == self.puzzle[i][j] and self.initial_puzzle[i][j] != 0:
                    self.squares[i][j].draw_original(self.scn)
                else:
                    self.squares[i][j].draw(self.scn)
        # Draw Grid outline
        for i in range(self.rows + 1):
            if i % 3 == 0 and i != 0:
                thickness = 4
            else:
                thickness = 1
            pygame.draw.line(self.scn, (0, 0, 0), (0, i * partitions), (self.width, i * partitions), thickness)
            pygame.draw.line(self.scn, (0, 0, 0), (i * partitions, 0), (i * partitions, self.height), thickness)

    def pencil(self, number):
        row, col = self.selected
        self.squares[row][col].set_temp(number)

    def select(self, row, col):
        for i in range(self.rows):
            for j in range(self.cols):
                self.squares[i][j].selected = False

        self.squares[row][col].selected = True
        self.selected = (row, col)

    def clicked(self, position):
        if position[0] < self.width and position[1] < self.height:
            partition = self.width / 9
            x = position[0] // partition
            y = position[1] // partition
            return int(y), int(x)

        else:
            return None

    def clear(self):
        row, col = self.selected
        if self.squares[row][col].value == 0:
            self.squares[row][col].set_temp(0)

    def is_completed(self):
        for i in range(self.rows):
            for j in range(self.cols):
                if self.squares[i][j].value == 0:
                    return False
        return True

    def get_selected(self):
        return self.selected

    def set_selected(self, position):
        self.selected = position

    def solve(self):
        return solve(self.initial_puzzle)

    def solve_gui(self):
        empty = locate_empty_space(self.model)
        if not empty:
            return True
        else:
            row, col = empty

        for i in range(1, 10):
            if check_if_valid(self.model, empty, i):
                self.model[row][col] = i
                self.squares[row][col].set(i)
                self.squares[row][col].draw_change(self.scn, True)
                self.update_model()
                pygame.display.update()
                pygame.time.delay(100)

                if self.solve_gui():
                    return True

                self.model[row][col] = 0
                self.squares[row][col].set(0)
                self.squares[row][col].draw_change(self.scn, False)
                self.update_model()
                pygame.display.update()
                pygame.time.delay(100)

        return False


class Square:
    rows = 9
    cols = 9

    def __init__(self, value, row, col, width, height):
        self.value = value
        self.temp = 0
        self.row = row
        self.col = col
        self.width = width
        self.height = height
        self.selected = False

    def set(self, number):
        self.value = number

    def set_temp(self, number):
        self.temp = number

    def draw_original(self, scn):
        partition = self.width / 9
        x = self.col * partition
        y = self.row * partition

        digit = f.render(str(self.value), 1, (0, 0, 0))
        scn.fill((245, 222, 179), (x, y, partition, partition))
        scn.blit(digit, (x + partition / 2 - digit.get_width() / 2,
                         y + partition / 2 - digit.get_height() / 2))

        if self.selected:
            pygame.draw.rect(scn, (255, 0, 0), (x, y, partition, partition), 3)

    def draw(self, scn):
        pencil_font = pygame.font.SysFont("comicsans", 24)

        partition = self.width / 9
        x = self.col * partition
        y = self.row * partition
        if self.temp != 0 and self.value == 0:
            digit = pencil_font.render(str(self.temp), 1, (0, 0, 0))
            scn.blit(digit, (x + 5, y + 5))
        elif not (self.value == 0):
            digit = f.render(str(self.value), 1, (0, 0, 0))
            scn.blit(digit, (x + partition / 2 - digit.get_width() / 2,
                             y + partition / 2 - digit.get_height() / 2))

        if self.selected:
            pygame.draw.rect(scn, (255, 0, 0), (x, y, partition, partition), 3)

    def draw_change(self, scn, g=True):
        partition = self.width / 9
        x = self.col * partition
        y = self.row * partition

        pygame.draw.rect(scn, (255, 255, 255), (x, y, partition, partition), 0)

        digit = f.render(str(self.value), 1, (0, 0, 0))
        scn.blit(digit, (x + partition / 2 - digit.get_width() / 2,
                         y + partition / 2 - digit.get_height() / 2))
        if g:
            pygame.draw.rect(scn, (255, 0, 0), (x, y, partition, partition), 3)
        else:
            pygame.draw.rect(scn, (0, 0, 0), (x, y, partition, partition), 1)


def format_time(seconds):
    minute = seconds // 60
    seconds = seconds % 60
    form = " {:02d} : {:02d} ".format(minute, seconds)
    return form


def redraw_scn(scn, puzzle, current_time, hints, btn):
    scn.fill((255, 255, 255))

    # time
    time_text = f.render("Time: " + format_time(current_time), 1, (0, 0, 0))
    scn.blit(time_text, (540 - 160, 560))

    # hints
    hints_text = f.render("Hints Left: " + str(hints), 1, (0, 0, 0))
    scn.blit(hints_text, (10, 560))

    # hint button
    btn.draw(scn, (0, 0, 0))

    # puzzle
    puzzle.draw()


def main(puzzle):
    scn = pygame.display.set_mode((540, 600))
    pygame.display.set_caption("Seppuku")
    sudoku = Grid(9, 9, 540, 540, scn, puzzle)
    sudoku.solved = sudoku.solve()[1]
    hints = 5
    hint_btn = Button((255, 255, 255), 260, 570, 100, 40, "Get Hint")
    key = None
    isRunning = True
    start = time.time()
    while isRunning:
        playtime = round(time.time() - start)

        if sudoku.is_completed():
            congratulations(playtime)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                quit()
            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_1:
                    key = 1
                if event.key == pygame.K_2:
                    key = 2
                if event.key == pygame.K_3:
                    key = 3
                if event.key == pygame.K_4:
                    key = 4
                if event.key == pygame.K_5:
                    key = 5
                if event.key == pygame.K_6:
                    key = 6
                if event.key == pygame.K_7:
                    key = 7
                if event.key == pygame.K_8:
                    key = 8
                if event.key == pygame.K_9:
                    key = 9
                if event.key == pygame.K_LEFT:
                    if sudoku.selected is None:
                        key = None
                    else:
                        row, col = sudoku.get_selected()
                        if col > 0:
                            col -= 1
                        else:
                            col = col - 1 + 9
                        sudoku.select(row, col)
                        key = None
                if event.key == pygame.K_RIGHT:
                    if sudoku.selected is None:
                        key = None
                    else:
                        row, col = sudoku.get_selected()
                        if col < 8:
                            col += 1
                        else:
                            col = col + 1 - 9
                        sudoku.select(row, col)
                        key = None
                if event.key == pygame.K_UP:
                    if sudoku.selected is None:
                        key = None
                    else:
                        row, col = sudoku.get_selected()
                        if row > 0:
                            row -= 1
                        else:
                            row = row - 1 + 9
                        sudoku.select(row, col)
                if event.key == pygame.K_DOWN:
                    if sudoku.selected is None:
                        key = None
                    else:
                        row, col = sudoku.get_selected()
                        if row < 8:
                            row += 1
                        else:
                            row = row + 1 - 9
                        sudoku.select(row, col)
                        key = None
                if event.key == pygame.K_DELETE or event.key == pygame.K_BACKSPACE:
                    sudoku.clear()
                    key = None

                if event.key == pygame.K_SPACE:
                    sudoku.solve_gui()

                if event.key == pygame.K_h:
                    if hints > 0:
                        row, col = sudoku.selected
                        if sudoku.squares[row][col].value == 0:
                            sudoku.puzzle[row][col] = sudoku.solved[row][col]
                            sudoku.squares[row][col].set(sudoku.solved[row][col])
                            hints -= 1

                if event.key == pygame.K_RETURN:
                    i, j = sudoku.selected
                    if sudoku.squares[i][j].temp != 0:
                        if sudoku.place_number(sudoku.squares[i][j].temp):
                            print("success")
                        else:
                            print("F")
                        key = None
            if event.type == pygame.MOUSEBUTTONDOWN:
                position = pygame.mouse.get_pos()
                clicked = sudoku.clicked(position)
                if clicked:
                    sudoku.select(clicked[0], clicked[1])
                    key = None
                if hint_btn.hover(position):
                    if hints > 0:
                        row, col = sudoku.selected
                        if sudoku.squares[row][col].value == 0:
                            sudoku.puzzle[row][col] = sudoku.solved[row][col]
                            sudoku.squares[row][col].set(sudoku.solved[row][col])
                            hints -= 1

        if sudoku.selected and key is not None:
            sudoku.pencil(key)

        redraw_scn(scn, sudoku, playtime, hints, hint_btn)
        pygame.display.update()


def congratulations(playtime):
    isRunning = True
    congratulations_font = pygame.font.SysFont("comicsans", 48)
    congratulations_text = congratulations_font.render("Congratulations!", 1, (0, 0, 0))
    final_time_text = congratulations_font.render("Your Time: {}".format(format_time(playtime)), 1, (0, 0, 0))
    restart_button = Button((255, 255, 255), 300, 340, 150, 40, "Play Again")
    while isRunning:
        screen.fill((255, 255, 255))
        screen.blit(congratulations_text, (300 - congratulations_text.get_width() / 2, 220))
        screen.blit(final_time_text, (300 - final_time_text.get_width() / 2, 270))
        restart_button.draw(screen, (0, 0, 0))
        for event in pygame.event.get():
            pos = pygame.mouse.get_pos()
            if event.type == pygame.QUIT:
                quit()
            if event.type == pygame.MOUSEBUTTONDOWN:
                if restart_button.hover(pos):
                    main_menu()
        pygame.display.update()


class Button:
    def __init__(self, color, x, y, width, height, text=''):
        self.color = color
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.text = text
        self.text_color = (0, 0, 0)

    def draw(self, scn, border_color=None):
        if border_color:
            pygame.draw.rect(scn, border_color, (self.x - 2 - self.width / 2, self.y - 2 - self.height / 2,
                                                 self.width + 4, self.height + 4), 0)

        pygame.draw.rect(scn, self.color, (self.x - self.width / 2, self.y - self.height / 2, self.width, self.height),
                         0)

        button_font = pygame.font.SysFont("comicsans", 36)
        button_text = button_font.render(self.text, 1, self.text_color)
        scn.blit(button_text, (self.x - button_text.get_width() / 2,
                               self.y - button_text.get_height() / 2))

    def hover(self, pos):
        if self.x - self.width / 2 < pos[0] < self.x + self.width / 2:
            if self.y - self.height / 2 < pos[1] < self.y + self.height / 2:
                return True

        return False


def get_puzzle(difficulty):
    response = requests.get("https://nine.websudoku.com/?level={}".format(difficulty)).content
    soup = BeautifulSoup(response, features="html.parser")
    ids = ['f00', 'f01', 'f02', 'f03', 'f04', 'f05', 'f06', 'f07', 'f08',
           'f10', 'f11', 'f12', 'f13', 'f14', 'f15', 'f16', 'f17', 'f18',
           'f20', 'f21', 'f22', 'f23', 'f24', 'f25', 'f26', 'f27', 'f28',
           'f30', 'f31', 'f32', 'f33', 'f34', 'f35', 'f36', 'f37', 'f38',
           'f40', 'f41', 'f42', 'f43', 'f44', 'f45', 'f46', 'f47', 'f48',
           'f50', 'f51', 'f52', 'f53', 'f54', 'f55', 'f56', 'f57', 'f58',
           'f60', 'f61', 'f62', 'f63', 'f64', 'f65', 'f66', 'f67', 'f68',
           'f70', 'f71', 'f72', 'f73', 'f74', 'f75', 'f76', 'f77', 'f78',
           'f80', 'f81', 'f82', 'f83', 'f84', 'f85', 'f86', 'f87', 'f88']
    data = []
    for cid in ids:
        data.append(soup.find('input', id=cid))
    puzzle = [[0 for i in range(9)] for j in range(9)]
    for index, cell in enumerate(data):
        try:
            puzzle[int(index / 9)][index % 9] = int(cell['value'])
        except:
            pass
    return puzzle


def main_menu():
    isRunning = True

    welcome_message_font = pygame.font.SysFont("comicsans", 32)
    welcome_text = welcome_message_font.render("Welcome, click on a difficulty level", 1, (0, 0, 0))

    while isRunning:
        screen.fill((255, 255, 255))
        screen.blit(welcome_text, (300 - welcome_text.get_width() / 2, 100))
        easy_button = Button((255, 255, 255), 300, 160, 150, 40, "Easy Breezy")
        medium_button = Button((255, 255, 255), 300, 220, 150, 40, "Medium")
        hard_button = Button((255, 255, 255), 300, 280, 150, 40, "Hard")
        evil_button = Button((255, 255, 255), 300, 340, 150, 40, "Evil")
        random_button = Button((255, 255, 255), 300, 400, 150, 40, "Random")
        easy_button.draw(screen, (0, 0, 0))
        medium_button.draw(screen, (0, 0, 0))
        hard_button.draw(screen, (0, 0, 0))
        evil_button.draw(screen, (0, 0, 0))
        random_button.draw(screen, (0, 0, 0))
        for event in pygame.event.get():
            pos = pygame.mouse.get_pos()

            if event.type == pygame.QUIT:
                isRunning = False

            if event.type == pygame.MOUSEBUTTONDOWN:
                if easy_button.hover(pos):
                    main(get_puzzle("1"))
                if medium_button.hover(pos):
                    main(get_puzzle("2"))
                if hard_button.hover(pos):
                    main(get_puzzle("3"))
                if evil_button.hover(pos):
                    main(get_puzzle("4"))
                if random_button.hover(pos):
                    rand_int = random.randrange(1, 5)
                    print(rand_int)
                    main(get_puzzle(str(rand_int)))

            if event.type == pygame.MOUSEMOTION:
                if easy_button.hover(pos):
                    easy_button.text_color = (255, 255, 255)
                    easy_button.color = (0, 0, 0)

        pygame.display.update()


main_menu()
